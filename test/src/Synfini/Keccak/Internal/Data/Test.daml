-- Copyright (c) 2023 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE BinaryLiterals #-}

module Synfini.Keccak.Internal.Data.Test where

import DA.Assert
import qualified DA.Map as Map
import qualified DA.Text as TX
import Daml.Script
import Synfini.Keccak.Internal.Data

test_bytesToLane : Script ()
test_bytesToLane = do
  bytesToLane [0xFF, 0xAF] === 0xAFFF
  laneToBytes 64 (bytesToLane [0xFF, 0xAF]) === [0xFF, 0xAF, 0, 0, 0, 0, 0, 0]
  laneToBytes 32 (bytesToLane [0xFF, 0xAF]) === [0xFF, 0xAF, 0, 0]

test_inv : Script ()
test_inv = do
  inv (-1) === 0
  inv 0 === (-1)
  inv minBound === maxBound

test_and : Script ()
test_and = do
  0xF1 & 0x1E3 === 0xE1

test_xor : Script ()
test_xor = do
  0x00FFAF `xor` 0x11ABAB === 0x115404

test_shiftl : Script ()
test_shiftl = do
  1 `shiftl` 0 === 1
  1 `shiftl` 1 === 0b10
  1 `shiftl` 63 === minBound
  1 `shiftl` 64 === 0
  0b1011 `shiftl` 3 === 0b1011000
  (2^62) `shiftl` 1 === minBound
  minBound `shiftl` 1 === 0
  minBound `shiftl` 2 === 0

test_shiftr : Script ()
test_shiftr = do
  1 `shiftr` 0 === 1
  1 `shiftr` 1 === 0
  minBound `shiftr` 63 === 1
  minBound `shiftr` 64 === 0
  0b1011 `shiftr` 3 === 1
  minBound `shiftr` 1 === 2^62
  minBound `shiftr` 2 === 2^61

test_rol : Script ()
test_rol = do
  rol 0b11010010 5 8 === 0b01011010

test_dropVector : Script ()
test_dropVector = do
  dropVector 3 (listToVector [1, 2, 3, 4]) === listToVector [4]

test_takeVector : Script ()
test_takeVector = do
  takeVector 3 (listToVector [1, 2, 3, 4]) === listToVector [1, 2, 3]

test_listToMatrix : Script ()
test_listToMatrix = do
  let l = [((1, 1), 4), ((0, 0), 1), ((0, 1), 2), ((1, 0), 3), ((0, 0), 99)]
  listToMatrix l === Map.fromList [
      (0, (0, Map.fromList [(0, (0, 99)), (1, (1, 2))])),
      (1, (1, Map.fromList [(0, (0, 3)), (1, (1, 4))]))
    ]

test_indexMatrix : Script ()
test_indexMatrix = do
  listToMatrix [((0, 0), 99)] ## (0, 0) === 99

test_mapMatrix : Script ()
test_mapMatrix = do
  let mat = listToMatrix [((0, 0), 99), ((0, 1), -5), ((1, 0), 0), ((1, 1), 5)]
  let mat' = mapMatrix (\i j v -> (i, j, v)) mat
  mat' ## (0, 0) === (0, 0, 99)
  mat' ## (0, 1) === (0, 1, -5)
  mat' ## (1, 0) === (1, 0, 0)
  mat' ## (1, 1) === (1, 1, 5)

test_textToBytes1 : Script ()
test_textToBytes1 = do
  vectorToList (textToBytes "A") === [65]

test_textToBytes2 : Script ()
test_textToBytes2 = do
  vectorToList (textToBytes $ TX.fromCodePoints [0x80]) === [0xC2, 0x80]
  vectorToList (textToBytes $ TX.fromCodePoints [0x7EE]) === [0xDF, 0xAE]

test_textToBytes3 : Script ()
test_textToBytes3 = do
  vectorToList (textToBytes $ TX.fromCodePoints [0x800]) === [0xE0, 0xA0, 0x80]
  vectorToList (textToBytes $ TX.fromCodePoints [0xA85F]) === [0xEA, 0xA1, 0x9F]

test_textToBytes4 : Script ()
test_textToBytes4 = do
  vectorToList (textToBytes $ TX.fromCodePoints [0x10000]) === [0xF0, 0x90, 0x80, 0x80]
  vectorToList (textToBytes $ TX.fromCodePoints [0x4B1F1]) === [0xF1, 0x8B, 0x87, 0xB1]
