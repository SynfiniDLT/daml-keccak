module Synfini.Keccak.Internal.Data (
  Vector,
  Matrix,
  vectorSize,
  listToVector,
  concatVectors,
  dropVector,
  takeVector,
  vectorToList,
  listToMatrix,
  matrixToList,
  updateMatrix,
  (#),
  (##),
  xor,
  rol,
  inv,
  (&),
  Lane, --(..),
  Byte,
  zeroLane,
  hexToLane,
  bytesToLane,
  laneToBytes,
  textToBytes,
  byteToHex
) where

import DA.Map (Map)
import qualified DA.Optional as O
import qualified DA.Map as Map
import qualified DA.Text as TX

zipChecked : [a] -> [b] -> [(a, b)]
zipChecked x y =
  if length x /= length y then
    error "zipChecked: list lengths are not equal"
  else
    zip x y

zipWithChecked : (a -> b -> c) -> [a] -> [b] -> [c]
zipWithChecked f x y =
  if length x /= length y then
    error "zipWithChecked: list lengths are not equal"
  else
    zipWith f x y

type Vector a = Map Int a

type Matrix a = Vector (Vector a)

vectorSize : Vector a -> Int
vectorSize = Map.size

listToVector : [a] -> Vector a
listToVector l = Map.fromList (zip [0..length l - 1] l)

vectorToList : Vector a -> [a]
vectorToList = fmap snd . Map.toList

takeVector : Int -> Vector a -> Vector a
takeVector n v = listToVector (fmap snd . take n $ Map.toList v)

dropVector : Int -> Vector a -> Vector a
dropVector n v = listToVector (fmap snd . drop n $ Map.toList v)

concatVectors : [Vector a] -> Vector a
concatVectors vs = listToVector . fmap snd $ concatMap Map.toList vs

updateMatrix : Int -> Int -> a -> Matrix a -> Matrix a
updateMatrix x y v = Map.alter u x
  where
    u None = Some $ Map.fromList [(y, v)]
    u (Some r) = Some $ Map.insert y v r

listToMatrix : [((Int, Int), a)] -> Matrix a
listToMatrix l = foldl addElem Map.empty l
  where
    addElem m ((x, y), value) = Map.alter (addElemInRow y value) x m

    addElemInRow y value None = Some (Map.fromList [(y, value)])
    addElemInRow y value (Some row) = Some (Map.insert y value row)

matrixToList : Matrix a -> [((Int, Int), a)]
matrixToList m = do
  (x, row) <- Map.toList m
  (y, value) <- Map.toList row
  pure ((x, y), value)

(#) : Vector a -> Int -> a
m # k = O.fromSomeNote ("Vector element not found at index: " <> show k) (Map.lookup k m)
infixl 3 #

(##) : Matrix a -> (Int, Int) -> a
m ## (x, y) = (m # x) # y
infixl 3 ##

-- Binary values where the most significant bit is the first element in the list
newtype Lane = Lane { unLane : [Bool] } deriving (Show, Eq)

laneSize : Int
laneSize = 64

type Byte = Int

zeroLane : Lane
zeroLane = Lane (replicate laneSize False)

pad : Int -> [Bool] -> [Bool]
pad n l =
  let lenDiff = length l - n in
  if lenDiff >= 0 then
    drop lenDiff l
  else
    replicate (-lenDiff) False <> l

-- Returns all permutations of bits of length n in ascending order:
-- 0...00, 0...01, 0...10, 00...11, ..., 1...1
bitPermutations : Int -> [[Bool]]
bitPermutations n | n <= 0 = []
bitPermutations 1 = [[False], [True]]
bitPermutations n =
  let p = bitPermutations (n - 1) in
  ((False ::) <$> p) <> ((True ::) <$> p)

nibblePermutations : [[Bool]]
nibblePermutations = bitPermutations 4

bytePermutations : [[Bool]]
bytePermutations = bitPermutations 8

hexUniChars : [Int]
hexUniChars = [48..57] <> -- 0 to 9
  [65..70] -- A to F
charBoolMap : Map Int [Bool]
charBoolMap = Map.fromList (zipChecked hexUniChars nibblePermutations)

byteValues : [Byte]
byteValues = [0..(2^8 - 1)]
byteBoolMap : Map Byte [Bool]
byteBoolMap =
  Map.fromList (zipChecked byteValues bytePermutations)

hexToLane : Text -> Lane
hexToLane =
  Lane .
  pad laneSize .
  concatMap (\char -> O.fromSomeNote ("Not a valid hex character: " <> show char) (Map.lookup char charBoolMap)) .
  TX.toCodePoints

xor : Lane -> Lane -> Lane
(Lane l) `xor` (Lane m) = Lane (zipWithChecked xorBits l m)

  where
    xorBits True False = True
    xorBits False True = True
    xorBits _ _ = False

one : Lane
one = Lane $ (replicate (laneSize - 1) False) <> [True]

masks : Vector Lane
masks = listToVector $ fmap Lane do
  i <- [0..laneSize]
  pure (pad laneSize (replicate i True))

rol : Lane -> Int -> Int -> Lane
rol value left bits =
  let top = value `shiftr` (bits - left) in
  let bot = (value & (masks # (bits - left))) `shiftl` left in
  bot |. top

inv : Lane -> Lane
inv (Lane l) = Lane (not <$> l)

(&) : Lane -> Lane -> Lane
Lane a & Lane b = Lane (zipWithChecked (&&) a b)

(|.) : Lane -> Lane -> Lane
Lane a |. Lane b = Lane (zipWithChecked (||) a b)

shiftr : Lane -> Int -> Lane
Lane a `shiftr` n = Lane (replicate n False <> take (laneSize - n) a)

shiftl : Lane -> Int -> Lane
Lane a `shiftl` n = Lane (drop n a <> replicate n False)

bytesToLane : [Byte] -> Lane
bytesToLane bs =
  Lane .
  pad laneSize .
  concatMap (\byte -> O.fromSomeNote ("Not a valid byte: " <> show byte) (Map.lookup byte byteBoolMap)) .
  reverse $ bs

chunksOf : Int -> [a] -> [[a]]
chunksOf n [] = []
chunksOf n l = take n l :: chunksOf n (drop n l)

laneToBytes : Int -> Lane -> [Byte]
laneToBytes n (Lane l) = reverse $
  bitsToByte <$> chunksOf 8 (pad n l)

  where
    bitsToByte bits = sum $ zipWithChecked (\bit idx -> if bit then 2^idx else 0) bits [7, 6..0]

textToBytes : Text -> Vector Byte
textToBytes = listToVector . TX.toCodePoints

hexes : [Text]
hexes = do
  hexChar <- hexUniChars
  hexChar2 <- hexUniChars
  pure $ TX.fromCodePoints [hexChar, hexChar2]

byteHexMap : Map Byte Text
byteHexMap = Map.fromList (zipChecked byteValues hexes)

byteToHex : Byte -> Text
byteToHex b = O.fromSomeNote ("Internal error: unknown byte value: " <> show b) (Map.lookup b byteHexMap)
