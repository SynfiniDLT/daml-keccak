-- Copyright (c) 2023 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Keccak.Internal.Data (
  Vector,
  Matrix,
  vectorSize,
  listToVector,
  concatVectors,
  dropVector,
  takeVector,
  vectorToList,
  listToMatrix,
  matrixToList,
  updateMatrix,
  mapMatrix,
  mapVector,
  (#),
  (##),
  xor,
  rol,
  inv,
  (&),
  Lane,
  Byte,
  zeroLane,
  bytesToLane,
  laneToBytes,
  textToBytes,
  byteToHex
) where

import DA.Map (Map)
import qualified DA.Optional as O
import qualified DA.Map as Map
import qualified DA.Text as TX

type Vector a = Map Int (Int, a)

type Matrix a = Vector (Vector a)

vectorSize : Vector a -> Int
vectorSize = Map.size

mapVector : (Int -> a -> b) -> Vector a -> Vector b
mapVector f = fmap (\(i, x) -> (i, f i x))

mapMatrix : (Int -> Int -> a -> b) -> Matrix a -> Matrix b
mapMatrix f = mapVector (\i row -> mapVector (f i) row)

listToVector : [a] -> Vector a
listToVector l = Map.fromList (zipWith (\i x -> (i, (i, x))) [0..length l - 1] l)

vectorToList : Vector a -> [a]
vectorToList = fmap snd . Map.values

takeVector : Int -> Vector a -> Vector a
takeVector n v = listToVector (take n $ vectorToList v)

dropVector : Int -> Vector a -> Vector a
dropVector n v = listToVector (drop n $ vectorToList v)

concatVectors : [Vector a] -> Vector a
concatVectors vs = listToVector $ concatMap vectorToList vs

updateMatrix : Int -> Int -> a -> Matrix a -> Matrix a
updateMatrix x y v = Map.alter u x
  where
    u None = Some $ (x, Map.fromList [(y, (y, v))])
    u (Some (i, r)) = Some $ (i, Map.insert y (y, v) r)

listToMatrix : [((Int, Int), a)] -> Matrix a
listToMatrix l = foldl addElem Map.empty l
  where
    addElem m ((x, y), value) = Map.alter (addElemInRow x y value) x m

    addElemInRow x y value None = Some (x, Map.fromList [(y, (y, value))])
    addElemInRow x y value (Some (_, row)) = Some (x, Map.insert y (y, value) row)

matrixToList : Matrix a -> [((Int, Int), a)]
matrixToList m = do
  (x, (_, row)) <- Map.toList m
  (y, (_, value)) <- Map.toList row
  pure ((x, y), value)

(#) : Vector a -> Int -> a
m # k = snd $
  O.fromSomeNote ("Keccak: Internal error: vector element not found at index: " <> show k) (Map.lookup k m)
infixl 3 #

(##) : Matrix a -> (Int, Int) -> a
m ## (x, y) = (m # x) # y
infixl 3 ##

type Lane = Int

type Byte = Int

zeroLane : Lane
zeroLane = 0

hexUniChars : [Int]
hexUniChars = [48..57] <> -- 0 to 9
  [65..70] -- A to F

byteValues : [Byte]
byteValues = [0..(2^8 - 1)]

xor : Lane -> Lane -> Lane
a `xor` b = bitwise xorBits 63 0 a b

  where
    xorBits True False = True
    xorBits False True = True
    xorBits _ _ = False

masks : Vector Lane
masks = listToVector $ (\i -> (-1) `shiftr` i) <$> [64,63..0] 

rol : Lane -> Int -> Int -> Lane
rol value left bits =
  let top = value `shiftr` (bits - left) in
  let bot = (value & (masks # (bits - left))) `shiftl` left in
  bot |. top

inv : Lane -> Lane
inv l
  | l > minBound = -l - 1
  | otherwise = maxBound

nextBit : Lane -> Int -> (Bool, Lane)
nextBit x i =
  if i == 63 then
    if x < 0 then
      (True, x + maxBound + 1)
    else
      (False, x)
  else
    let cutOff = 2 ^ i in
    if x >= cutOff then
      (True, x - cutOff)
    else
      (False, x)

bitwise : (Bool -> Bool -> Bool) -> Int -> Lane -> Lane -> Lane -> Lane
bitwise op i output x y
  | i < 0 = output
  | otherwise =
    let (xBit, nextX) = nextBit x i
        (yBit, nextY) = nextBit y i
    in
    if op xBit yBit then
      let toAdd = if i == 63 then minBound else (2 ^ i) in
      bitwise op (i - 1) (output + toAdd) nextX nextY
    else
      bitwise op (i - 1) output nextX nextY

(&) : Lane -> Lane -> Lane
a & b  = bitwise (&&) 63 0 a b

(|.) : Lane -> Lane -> Lane
a |. b = bitwise (||) 63 0 a b

shiftr : Lane -> Int -> Lane
a `shiftr` n
  | n <= 0 = a
  | n >= 64 = 0
  | a < 0 = ((a + maxBound + 1) `shiftr` n) + 2^(63 - n)
  | otherwise = (a / (2 ^ (n - 1))) / 2

shiftl : Lane -> Int -> Lane
a `shiftl` n
  | n <= 0 = a
  | n >= 64 = 0
  | a < 0 = (a + maxBound + 1) `shiftl` n
  | otherwise =
    let r 
          | n > 1 = a % (2 ^ (63 - n + 1))
          | otherwise = a
    in
    let rShifted = r * (2 ^ (n - 1)) in
    if rShifted >= 2^62 then
      (rShifted - 2^62) * 2 + minBound
    else
      rShifted * 2

bytesToLane : [Byte] -> Lane
bytesToLane bytes = sum $ zipWith (\byte i -> byte `shiftl` i) bytes [0,8..64]

laneToBytes : Int -> Lane -> [Byte]
laneToBytes w l = map (\i -> (l `shiftr` i) & 0xFF) [0,8..(w - 8)]

textToBytes : Text -> Vector Byte
textToBytes = listToVector . concatMap charToUtf8Bytes . TX.toCodePoints

charToUtf8Bytes : Int -> [Byte]
charToUtf8Bytes codePoint
  | codePoint < 0 = error ("Keccak: Internal error: negative code point: " <> show codePoint)
  | codePoint <= 0x7F = [codePoint]
  | codePoint <= 0x7FF =
    let byte1 = 0xC0 + (codePoint `shiftr` 6) in
    let byte2 = 0x80 + (0x3F & codePoint) in
    [byte1, byte2]
  | codePoint <= 0xFFFF =
    let byte1 = 0xE0 + (codePoint `shiftr` 12) in
    let byte2 = 0x80 + ((codePoint `shiftr` 6) & 0x3F) in
    let byte3 = 0x80 + (codePoint & 0x3F) in
    [byte1, byte2, byte3]
  | codePoint <= 0x10FFFF =
    let byte1 = 0xF0 + (codePoint `shiftr` 18) in
    let byte2 = 0x80 + ((codePoint `shiftr` 12) & 0x3F) in
    let byte3 = 0x80 + ((codePoint `shiftr` 6) & 0x3F) in
    let byte4 = 0x80 + (codePoint & 0x3F) in
    [byte1, byte2, byte3, byte4]
  | otherwise = error ("Keccak: Internal error: out of range code point: " <> show codePoint)

hexes : [Text]
hexes = do
  hexChar <- hexUniChars
  hexChar2 <- hexUniChars
  pure $ TX.fromCodePoints [hexChar, hexChar2]

byteHexMap : Map Byte Text
byteHexMap = Map.fromList (zip byteValues hexes)

byteToHex : Byte -> Text
byteToHex b = O.fromSomeNote ("Keccak: Internal error: unknown byte value: " <> show b) (Map.lookup b byteHexMap)
